import { TMDBDiscover } from '@/common/types/tmdbDiscover'
import { TMDBMovie } from '@/common/types/tmdbMovie';
import { TMDBSerie } from '@/common/types/tmdbSerie';
import { GetServerSideProps, GetServerSidePropsContext } from 'next'
import Head from 'next/head'
import Image from 'next/image';

type Props ={
  movies: TMDBMovie[],
  series: TMDBSerie[],
  headerImage: string,
  language: string
}
export default function Home(props: Props) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="text-3xl font-bold underline">
          <Image src={`${process.env.THEMOVIEDB_BASE_URL}${process.env.THEMOVIEDB_BACKDROP_SIZE}${props.headerImage}`} width={500} height={500} alt=""/>
          <p>Pel√≠culas populares</p>
          {props.movies.map((movie, index) => (
            <div key={`movie${index}`}>
						  <Image src={`${process.env.THEMOVIEDB_BASE_URL}${process.env.THEMOVIEDB_BACKDROP_SIZE}${movie.poster_path}`} width={100} height={100} alt="" />
              <p>{movie.title}</p>
            </div>
					))}
          <p>Series populares</p>
          {props.series.map((serie, index) => (
            <div key={`serie${index}`}>
						  <Image src={`${process.env.THEMOVIEDB_BASE_URL}${process.env.THEMOVIEDB_BACKDROP_SIZE}${serie.poster_path}`} width={100} height={100} alt="" />
              <p>{serie.name}</p>
            </div>
					))}
        </h1>
        
      </main>
    </>
  )
}


export const getServerSideProps: GetServerSideProps = async (context: GetServerSidePropsContext) => {
  const language: string = context.query?.language?.toString() || "en"

  const randomMovieSerie: number = Math.floor(Math.random() * 2);
  var headerBackImage: string = ""

  const discoverMovies: TMDBDiscover = await fetch(`${process.env.THEMOVIEDB_API_URL}/discover/movie?api_key=${process.env.THEMOVIEDB_API_KEY}&language=${language}&sort_by=popularity.desc&watch_region=${context.params?.country}&with_watch_monetization_types=flatrate`).then((x) => x.json());
  const discoverSeries: TMDBDiscover = await fetch(`${process.env.THEMOVIEDB_API_URL}/discover/tv?api_key=${process.env.THEMOVIEDB_API_KEY}&language=${language}&sort_by=popularity.desc&watch_region=${context.params?.country}&with_watch_monetization_types=flatrate`).then((x) => x.json());
   
  if(randomMovieSerie == 0){    
    const randomMovie: number = Math.floor(Math.random() * 20);    
    headerBackImage = `${process.env.THEMOVIEDB_BASE_URL}${process.env.THEMOVIEDB_BACKDROP_SIZE}${discoverMovies.results[randomMovie].backdrop_path}`
  }

  if(randomMovieSerie == 1){
    const randomSerie: number = Math.floor(Math.random() * 20);  
    headerBackImage = `${process.env.THEMOVIEDB_BASE_URL}${process.env.THEMOVIEDB_BACKDROP_SIZE}${discoverSeries.results[randomSerie].backdrop_path}`
  }   

  context.res.setHeader('Cache-control', `public, s-maxage=432000, max-age=432000, stale-while-revalidate=59`);
  return {
      props: {
        movies: discoverMovies.results,
        series: discoverSeries.results,
        headerImage: headerBackImage,
        language
      }
  }
}
